---
layout: post
title:      " Taskaroo project log"
date:       2019-05-15 01:27:18 +0000
permalink:  taskaroo_project_log
---

For the Vanilla  Ruby Rails project as part of the Flatiron curriculum I picked a less than novel project idea of a shared task list application.  Hopefully to make up for using a project idea picked off the list of example project ideas for this section I can at least stand behind the quality of the execution which I do think holds up.  So letâ€™s talk a bit about what parts or the execution I feel like worked out pretty well.
## Victories
The List#Show [view](https://github.com/AlexanderCleasby/taskaroo/blob/master/app/views/lists/show.html.erb) has a lot going on. The two big ideas are the ul containing that actual items in the list and the form that conditionally renders for users with attiquate access for hitting the Task#Create action.  The ul renders the title of each task as well as an inline form with only a submit button that sends a post request to the Task#Toggle action.  The button styles conditionally to contain either a success or danger colored, check or X.  with the help of Bootstrap, fontawesome and the Extends functionallity in Scss.  It is pretty self explanatory how this was done looking at my [style sheet](https://github.com/AlexanderCleasby/taskaroo/blob/master/app/assets/stylesheets/application.scss), but it is a pretty cool idea I think.  This request is something that probablly should be handled  by a fetch call fired from JS, but doing that is not in the spirit of the project (it is not something covered in this section of the course) and as I undesrtand it is an enhancment that can be made in the next portion of the course.

Furter down the template we get to the Task#Create  form that conditionally renders for users that are either the owner of the list or have been granted write access by the owner with the help of a model method. This is maybe a part of this template that could get a little work since this could probabbly be a partial in the spirit of seperating concerns, but on the other hand it is such a small form that it doesn't make a huge difference.  Since the Task#Create action redirects to the newly created task's list's show action submitting this form produces an effect simmilar to if the form was submitted by a background request using JS even though a new template is being rendered.  Even though this too should 100% be handled with a fetch request in the background I did get a kick out of another student suggesting that I had used JS to acheve this effect when in keeping with what I felt was the thesis of this project I deliberatly did not do that.
